#!/usr/bin/env node

var minimist = require('minimist');
var whereis = require('whereis');

var selenium = require('../');

whereis('java', function javaFound(err) {
  if (err) {
    console.error('Could not find `java`, make sure it is installed in your $PATH');
    return;
  }

  var argv = minimist(process.argv.slice(2));

  var action = argv._[0];

  if (action !== 'install' && action !== 'start') {
    console.log('Usage: selenium-standalone install or selenium-standalone start');
    return;
  }

  // everything after `selenium-standalone install [options] --` will be in argv._
  var seleniumArgs = argv._.slice(1);

  // build a new map removing `_` from argv
  var options = Object.keys(argv).reduce(function(prev, cur) {
    if (cur !== '_') {
      prev[cur] = argv[cur];
    }

    return prev;
  }, {});

  options.seleniumArgs = seleniumArgs;
  options.spawnOptions = {
    stdio: 'inherit'
  };

  actions[action](options);
});

var actions = {
  start: function(options) {
    var killEvents = ['exit', 'SIGTERM', 'SIGINT'];

    selenium.start(options, started);

    function started(err, cp) {
      if (err) {
        throw err;
      }

      console.log('SELENIUM-STANDALONE: Selenium started');

      killEvents.forEach(register);

      function register(evName) {
        process.on(evName, kill);
      }

      function unregister(evName) {
        process.removeListener(evName, kill);
      }

      function kill() {
        killEvents.forEach(unregister);
        cp.kill('SIGTERM');
      }
    }
  },
  install: function(options) {
    selenium.install(options, installed);

    function installed(err) {
      if (err) {
        throw err;
      }

      console.log('SELENIUM-STANDALONE: Selenium installed');
    }
  }
};
